// Packages/User/LSP-gopls.sublime-settings
{
  "command": [
    "/usr/local/bin/gopls"
  ],
  "selector": "source.go | source.gomod",
  "settings": {
    // (Experimental) allowImplicitNetworkAccess disables GOPROXY=off, allowing implicit module
    // downloads rather than requiring user action. This option will eventually
    // be removed.
    "gopls.allowImplicitNetworkAccess": false,
    // (Experimental) allowModfileModifications disables -mod=readonly, allowing imports from
    // out-of-scope modules. This option will eventually be removed.
    "gopls.allowModfileModifications": true,
    // analyses specify analyses that the user would like to enable or disable.
    // A map of the names of analysis passes that should be enabled/disabled.
    // A full list of analyzers that gopls uses can be found
    // [here](https://github.com/golang/tools/blob/master/gopls/doc/analyzers.md).
    "gopls.analyses": {
      "asmdecl": true,
      "assign": true,
      "atomic": true,
      "atomicalign": true,
      "bools": true,
      "buildtag": true,
      "cgocall": true,
      "composites": true,
      "copylocks": true,
      "deepequalerrors": true,
      "errorsas": true,
      "fieldalignment": true,
      "fillreturns": true,
      "fillstruct": true,
      "httpresponse": true,
      "ifaceassert": true,
      "infertypeargs": true,
      "loopclosure": true,
      "lostcancel": true,
      "nilfunc": true,
      "nilness": true,
      "printf": true,
      "shadow": false,
      "shift": true,
      "simplifycompositelit": true,
      "simplifyrange": true,
      "simplifyslice": true,
      "sortslice": true,
      "stdmethods": true,
      "stringintconv": true,
      "structtag": true,
      "testinggoroutine": true,
      "tests": true,
      "unmarshal": true,
      "unreachable": true,
      "unsafeptr": true,
      "unusedparams": true,
      "unusedresult": true,
      "unusedwrite": true,
      "useany": true,
      "nonewvars": true,
      "noresultvalues": true,
      "undeclaredname": true,
      "stubmethods": true
    },
    // (Experimental) annotations specifies the various kinds of optimization diagnostics
    // that should be reported by the gc_details command.
    "gopls.annotations": {
      "bounds": true,
      "escape": true,
      "inline": true,
      "nil": true
    },
    // buildFlags is the set of flags passed on to the build system when invoked.
    // It is applied to queries like `go list`, which is used when discovering files.
    // The most common use is to set `-tags`.
    // If unspecified, values of `go.buildFlags, go.buildTags` will be propagated.
    "gopls.buildFlags": [],
    // codelenses overrides the enabled/disabled state of code lenses. See the
    // "Code Lenses" section of the
    // [Settings page](https://github.com/golang/tools/blob/master/gopls/doc/settings.md)
    // for the list of supported lenses.
    "gopls.codelenses": {
      "gc_details": true,
      "generate": true,
      "regenerate_cgo": true,
      "test": true,
      "tidy": true,
      "upgrade_dependency": true,
      "vendor": true
    },
    // (For Debugging) completionBudget is the soft latency goal for completion requests. Most
    // requests finish in a couple milliseconds, but in some cases deep
    // completions can take much longer. As we use up our budget we
    // dynamically reduce the search scope to ensure we return timely
    // results. Zero means unlimited.
    "gopls.completionBudget": "100ms",
    // directoryFilters can be used to exclude unwanted directories from the
    // workspace. By default, all directories are included. Filters are an
    // operator, `+` to include and `-` to exclude, followed by a path prefix
    // relative to the workspace folder. They are evaluated in order, and
    // the last filter that applies to a path controls whether it is included.
    // The path prefix can be empty, so an initial `-` excludes everything.
    // Examples:
    // Exclude node_modules: `-node_modules`
    // Include only project_a: `-` (exclude everything), `+project_a`
    // Include only project_a, but not node_modules inside it: `-`, `+project_a`,
    // `-project_a/node_modules`
    "gopls.directoryFilters": [],
    // env adds environment variables to external commands run by `gopls`, most notably `go
    // list`.
    "gopls.env": {},
    // (Experimental) expandWorkspaceToModule instructs `gopls` to adjust the scope of the
    // workspace to find the best available module root. `gopls` first looks for
    // a go.mod file in any parent directory of the workspace folder, expanding
    // the scope to that directory if it exists. If no viable parent directory is
    // found, gopls will check if there is exactly one child directory containing
    // a go.mod file, narrowing the scope to that directory if it exists.
    "gopls.expandWorkspaceToModule": true,
    // diagnosticsDelay controls the amount of time that gopls waits
    // after the most recent file modification before computing deep diagnostics.
    // Simple diagnostics (parsing and type-checking) are always run immediately
    // on recently modified packages.
    // This option must be set to a valid duration string, for example `"250ms"`.
    "gopls.diagnosticsDelay": "250ms",
    // (Experimental) experimentalPackageCacheKey controls whether to use a coarser cache key
    // for package type information to increase cache hits. This setting removes
    // the user's environment, build flags, and working directory from the cache
    // key, which should be a safe change as all relevant inputs into the type
    // checking pass are already hashed into the key. This is temporarily guarded
    // by an experiment because caching behavior is subtle and difficult to
    // comprehensively test.
    "gopls.experimentalPackageCacheKey": true,
    // (Experimental) experimentalPostfixCompletions enables artifical method snippets
    // such as "someSlice.sort!".
    "gopls.experimentalPostfixCompletions": true,
    // (Experimental) experimentalTemplateSupport opts into the experimental support
    // for template files.
    "gopls.experimentalTemplateSupport": true,
    // (Experimental) experimentalWorkspaceModule opts a user into the experimental support
    // for multi-module workspaces.
    "gopls.experimentalWorkspaceModule": true,
    // gofumpt indicates if we should run gofumpt formatting.
    "gopls.gofumpt": true,
    // hoverKind controls the information that appears in the hover text.
    // SingleLine and Structured are intended for use only by authors of editor plugins.
    // possible values: FullDocumentation, NoDocumentation, SingleLine, Structured, SynopsisDocumentation
    "gopls.hoverKind": "FullDocumentation",
    // importShortcut specifies whether import statements should link to
    // documentation or go to definitions.
    // possible values: Both, Definition, Link
    "gopls.importShortcut": "Both",
    // linkTarget controls where documentation links go.
    // It might be one of:
    // * `"godoc.org"`
    // * `"pkg.go.dev"`
    // If company chooses to use its own `godoc.org`, its address can be used as well.
    "gopls.linkTarget": "pkg.go.dev",
    // linksInHover toggles the presence of links to documentation in hover.
    "gopls.linksInHover": true,
    // local is the equivalent of the `goimports -local` flag, which puts
    // imports beginning with this string after third-party packages. It should
    // be the prefix of the import path whose imports should be grouped
    // separately.
    "gopls.local": "github.com/kendfss",
    // (Advanced) matcher sets the algorithm that is used when calculating completion
    // candidates.
    // possible values: CaseInsensitive, CaseSensitive, Fuzzy
    "gopls.matcher": "Fuzzy",
    // (Experimental) memoryMode controls the tradeoff `gopls` makes between memory usage and
    // correctness.
    // Values other than `Normal` are untested and may break in surprising ways.
    // possible values: DegradeClosed, Normal
    "gopls.memoryMode": "Normal",
    // (Experimental) semanticTokens controls whether the LSP server will send
    // semantic tokens to the client.
    "gopls.semanticTokens": true,
    // (Experimental) staticcheck enables additional analyses from staticcheck.io.
    "gopls.staticcheck": false,
    // (Advanced) symbolMatcher sets the algorithm that is used when finding workspace symbols.
    // possible values: CaseInsensitive, CaseSensitive, Fuzzy
    "gopls.symbolMatcher": "Fuzzy",
    // (Advanced) symbolStyle controls how symbols are qualified in symbol responses.
    // possible values: Dynamic, Full, Package
    "gopls.symbolStyle": "Dynamic",
    // placeholders enables placeholders for function parameters or struct
    // fields in completion responses.
    "gopls.usePlaceholders": true,
    // (For Debugging) verboseOutput enables additional debug logging.
    "gopls.verboseOutput": false
  }
}
